/**
 * SnowflakeMainBatchScheduler
 * 
 * This class reads Snowflake main batch configurations from custom metadata
 * and executes the data extraction batches in the specified order.
 */
global class SnowflakeMainBatchScheduler implements Schedulable {
    
    /**
     * Execute method that runs when the scheduler is triggered
     */
    global void execute(SchedulableContext sc) {
        runNow();
    }
    
    /**
     * Method to run only the data extraction batches
     */
    public static void runDataExtractionBatches() {
        // Get sysToday's date as default
        String sysToday = DateTime.now().format('yyyy-MM-dd');
        
        // Get batch configurations for Snowflake data extraction jobs
        List<Snowflake_Batch_Configuration__mdt> batchConfigs = [
            SELECT Label, Batch_Input__c, Batch_Size__c, Execution_Order__c, 
                   Is_Active__c, Start_Date_Override__c, End_Date_Override__c
            FROM Snowflake_Batch_Configuration__mdt
            WHERE Is_Active__c = true
            AND Execution_Order__c!= null
            AND Execution_Order__c <= 4  // Only get the first 4 batches (data extraction jobs)
            ORDER BY Execution_Order__c ASC
        ];
        
        System.debug('Found ' + batchConfigs.size() + ' active data extraction batch configurations');
        
        // Get default date configuration
        Snowflake_Batch_Configuration__mdt dateConfig = Snowflake_Batch_Configuration__mdt.getInstance('Date_Configuration');
        
        // Default start and end dates from the Date_Configuration record
        String defaultStartDate = dateConfig.Start_Date_Override__c != null ? 
            formatDate(dateConfig.Start_Date_Override__c) : sysToday;
        String defaultEndDate = dateConfig.End_Date_Override__c != null ? 
            formatDate(dateConfig.End_Date_Override__c) : sysToday;
        
        // Process each batch configuration
        for (Snowflake_Batch_Configuration__mdt config : batchConfigs) {
            try {
                // Skip if batch input is not provided
                if (String.isBlank(config.Batch_Input__c)) {
                    System.debug('Skipping batch: ' + config.Label + ' - No batch input specified');
                    continue;
                }
                
                // Determine batch size (default to 1 if not specified)
                Integer batchSize = config.Batch_Size__c != null ? Integer.valueOf(config.Batch_Size__c) : 1;
                
                // Execute the batch
                System.debug('Executing batch: ' + config.Label + 
                           ' with procedure: ' + config.Batch_Input__c + 
                           ' batch size: ' + batchSize + 
                           ' date range: ' + defaultStartDate + ' to ' + defaultEndDate);
                ID batchId = Database.executeBatch(
                    new SnowflakeMainBatch(defaultStartDate, defaultEndDate, config.Batch_Input__c), 
                    batchSize
                );
                
                System.debug('Batch execution ID: ' + batchId);
                
            } catch (Exception e) {
                System.debug('Error executing batch ' + config.Label + ': ' + e.getMessage());
            }
        }
    }
    
    /**
     * Helper method to format Date to String in yyyy-MM-dd format
     */
    private static String formatDate(Date d) {
        return d.year() + '-' + 
               String.valueOf(d.month()).leftPad(2, '0') + '-' + 
               String.valueOf(d.day()).leftPad(2, '0');
    }
    
    /**
     * Method to run the batch jobs immediately
     */
    public static void runNow() {
        runDataExtractionBatches();
    }
}